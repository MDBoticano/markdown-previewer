{"version":3,"sources":["Default.md","Editor.js","Preview.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Editor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleTextAreaChange","event","setState","editorText","target","value","updateParent","previewUpdater","state","textToPreview","bind","assertThisInitialized","loadDefaultMD","_this2","defaultPath","require","fetch","then","response","text","react_default","a","createElement","id","onChange","React","Component","Preview","markdownText","marked","prevProps","className","dangerouslySetInnerHTML","__html","store","createStore","arguments","length","undefined","action","type","styles","body","background-color","min-height","App","childText","previewText","loadStyles","i","document","style","console","log","src_Editor_0","src_Preview_0","AppWrapper","es","App_App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.836a1d7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Default.9e9edbf7.md\";","import React from 'react';\r\n\r\n// Styling\r\nimport './Editor.css';\r\n\r\n// React-Redux\r\n// import { connect } from 'react-redux';\r\n\r\nclass Editor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      editorText: this.props.editorText,\r\n      textToPreview: \"\"\r\n    };\r\n    // Bind functions\r\n    this.handleTextAreaChange = this.handleTextAreaChange.bind(this);\r\n    this.updateParent = this.updateParent.bind(this);\r\n    this.loadDefaultMD = this.loadDefaultMD.bind(this);\r\n  }\r\n\r\n  // Lifecycle: once component has mounted, right before rendering\r\n  componentDidMount() {\r\n    this.loadDefaultMD();\r\n  }\r\n\r\n  // Loads default markdown file to preview\r\n  loadDefaultMD() {\r\n    // Path for Default.md\r\n    let defaultPath = require(\"./Default.md\");\r\n\r\n    // Update state to include editor text\r\n    fetch(defaultPath)\r\n      .then(response => {\r\n        return response.text()\r\n      })\r\n      .then(text => {\r\n        this.setState({\r\n          editorText: text\r\n        })\r\n      })\r\n  }\r\n\r\n  // Function: when textarea is modified, update state to reflect changes\r\n  handleTextAreaChange = (event) => {\r\n    this.setState({\r\n      editorText: event.target.value,\r\n    }, () => {\r\n      this.updateParent();\r\n    });\r\n  }\r\n\r\n  // Use callback function to update parent editorText\r\n  // ISSUE: one character behind, need to handle async?\r\n  // Function: callback function to update parent property \"editorText\"\r\n  updateParent = () => {\r\n    this.props.previewUpdater(this.state.editorText);\r\n  }\r\n\r\n  // Render\r\n  render() {\r\n    return (\r\n      <div id=\"editor-body\">\r\n        <h2 id=\"editor-title\">Editor</h2>\r\n        <textarea id=\"editor\" value={this.state.editorText}\r\n          onChange={this.handleTextAreaChange}>\r\n        </textarea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Redux store code\r\n// // Puts state data into store\r\n// const mapStateToProps = (state) => {\r\n//   //console.log(state.editorText);\r\n//   return {\r\n//     editorText: state.editorText\r\n//   }\r\n// }\r\n\r\n// // Dispatch to actually change store\r\n// const mapDispatchToProps = (dispatch, props) => {\r\n//   return {\r\n//     editorText: props.editorText\r\n//   }\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Editor);\r\nexport default Editor;","import React from 'react';\r\n\r\n// Styling\r\nimport './Preview.css';\r\n\r\n// Marked for parsing and converting to markdown\r\nimport marked from 'marked';\r\n\r\n// React-Redux\r\n// import { connect } from 'react-redux';\r\n\r\nclass Preview extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      editorText: this.props.editorText,\r\n      markdownText: \"\"\r\n    };\r\n    this.loadDefaultMD = this.loadDefaultMD.bind(this);\r\n  }\r\n\r\n  // Lifecycle: once component has mounted, right before rendering\r\n  componentDidMount() {\r\n    this.loadDefaultMD();\r\n  }\r\n\r\n  // Loads default markdown file to preview\r\n  loadDefaultMD() {\r\n    // Path for Default.md\r\n    let defaultPath = require(\"./Default.md\");\r\n\r\n    // Update state to include converted text\r\n    fetch(defaultPath)\r\n      .then(response => {\r\n        return response.text()\r\n      })\r\n      .then(text => {\r\n        this.setState({\r\n          markdownText: marked(text)\r\n        })\r\n      })\r\n  }\r\n\r\n  // Function: if props changes, update state to reflect it\r\n  // Components don't re-render unless the STATE changes\r\n  componentDidUpdate(prevProps) {\r\n    // Compare current props to previous props\r\n    if (this.props.editorText !== prevProps.editorText) {\r\n      // Update state with a converted mark down text\r\n      // Note: editorText is unecessary, as it's the same as props\r\n      this.setState({ editorText: this.props.editorText, markdownText: marked(this.props.editorText) });\r\n    }\r\n  }\r\n\r\n  // Render\r\n  render() {\r\n    return (\r\n      <div id=\"preview-body\">\r\n        <h2 id=\"preview-title\">Preview</h2>\r\n        <div id=\"preview\" className=\"markdown-text\"\r\n          dangerouslySetInnerHTML={{ __html: this.state.markdownText }} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Redux code\r\n// const mapStateToProps = function (state) {\r\n//   console.log(state.editorText);\r\n//   return {\r\n//     previewText: state.editorText\r\n//   }\r\n// }\r\n\r\n// export default connect(mapStateToProps)(Preview);\r\n\r\nexport default Preview;","import React from 'react';\r\n\r\n// Styling\r\nimport './App.css';\r\n\r\n// React-Redux\r\nimport { Provider } from 'react-redux';\r\nimport { createStore} from 'redux';\r\n\r\n// Components\r\nimport Editor from './Editor';\r\nimport Preview from './Preview';\r\n\r\n// ---------------------------- Redux Code ---------------------------------- //\r\n// Consts for action types\r\nconst PREVIEW = 'PREVIEW';\r\n\r\n// Action creator for 'PREVIEW'\r\n// const previewText = (text) => {\r\n//   return {\r\n//     type: PREVIEW,\r\n//     text: text\r\n//   }\r\n// }\r\n\r\n// Reducer\r\nconst editorReducer = (state = '', action) => {\r\n  switch (action.type) {\r\n    case (PREVIEW):\r\n      return [action.text];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Create the Redux store\r\nconst store = createStore(editorReducer);\r\n\r\n// ---------------------------- React Code ---------------------------------- //\r\n\r\n// Styling for body\r\nlet styles = {\r\n  body : {\r\n    \"background-color\": \"#ddd\",\r\n    \"min-height\": \"100vh\"\r\n  }\r\n}\r\n\r\n// Class App\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      editorText: \"\",\r\n      previewText: \"\"\r\n    };\r\n    this.previewUpdater = this.previewUpdater.bind(this);\r\n    this.loadStyles = this.loadStyles.bind(this);\r\n  }\r\n\r\n  // Function: callback to update parent using child\r\n  previewUpdater = (childText) => {\r\n    this.setState({\r\n      previewText: childText\r\n    });\r\n  }\r\n\r\n  loadStyles = () => {\r\n    for (var i in styles.body) {\r\n      document.body.style[i] = styles.body[i];\r\n    }\r\n    console.log(\"Styles loaded\");\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.loadStyles();\r\n  }\r\n\r\n\r\n\r\n  // Subscribe to store\r\n  // store.subscribe = () => {\r\n  //   this.setState({\r\n  //     editorText: store.getState().editorText;\r\n  //   });\r\n  // }\r\n\r\n  // Render\r\n  render() {\r\n    return (\r\n      <div id=\"app-body\">\r\n        <Editor previewUpdater={this.previewUpdater}/>\r\n        <Preview editorText={this.state.previewText}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// Wrap App with Provider to provide access to store\r\nclass AppWrapper extends React.Component {\r\n  render() {\r\n    return (\r\n      <Provider store = {store}>\r\n        <App />\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default AppWrapper;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}