{"version":3,"sources":["Editor.js","Preview.js","App.js","serviceWorker.js","index.js"],"names":["Editor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleTextAreaChange","event","setState","editorText","target","value","state","textToPreview","bind","assertThisInitialized","react_default","a","createElement","Fragment","id","onChange","React","Component","connect","console","log","dispatch","Preview","previewText","store","createStore","arguments","length","undefined","action","type","text","App","src_Editor_0","src_Preview_0","AppWrapper","es","App_App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUAQMA,qBACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAURQ,qBAAuB,SAACC,GACtBR,EAAKS,SAAS,CACZC,WAAYF,EAAMG,OAAOC,SAX3BZ,EAAKa,MAAQ,CACXH,WAAYV,EAAKD,MAAMW,WACvBI,cAAe,IAGjBd,EAAKO,qBAAuBP,EAAKO,qBAAqBQ,KAA1Bd,OAAAe,EAAA,EAAAf,CAAAD,IAPXA,wEAmBjB,OACEiB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,YAAUE,GAAG,SAAST,MAAOT,KAAKU,MAAMH,WACxCY,SAAUnB,KAAKI,+BAvBFgB,IAAMC,YA6CZC,cAdS,SAACZ,GAEvB,OADAa,QAAQC,IAAId,EAAMH,YACX,CACLA,WAAYG,EAAMH,aAKK,SAACkB,EAAU7B,GACpC,MAAO,CACLW,WAAYX,EAAMW,aAIPe,CAA6C3B,GC7CtD+B,qBACJ,SAAAA,EAAY9B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0B,IACjB7B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4B,GAAAvB,KAAAH,KAAMJ,KACDc,MAAQ,CACXH,WAAY,IAHGV,wEAcjB,OACEiB,EAAAC,EAAAC,cAAA,OAAKE,GAAG,WACNJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,0BAjBME,IAAMC,YAgCbC,cAPS,SAASZ,GAE/B,OADAa,QAAQC,IAAId,EAAMH,YACX,CACLoB,YAAajB,EAAMH,aAIRe,CAAyBI,GCJlCE,EAAQC,YAVQ,WAAwB,IAAvBnB,EAAuBoB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5C,OAAQC,EAAOC,MACb,IAbY,UAcV,MAAO,CAACD,EAAOE,MACjB,QACE,OAAOzB,KAQP0B,cACJ,SAAAA,EAAYxC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,IACjBvC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsC,GAAAjC,KAAAH,KAAMJ,KACDc,MAAQ,CACXH,WAAY,GACZoB,YAAa,IAJE9B,wEAiBjB,OACEiB,EAAAC,EAAAC,cAAA,OAAKE,GAAG,YACNJ,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,CAAS/B,WAAYP,KAAKJ,MAAMW,qBArBtBa,IAAMC,WA0CTkB,mLATX,OACEzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAUZ,MAASA,GACjBd,EAAAC,EAAAC,cAACyB,EAAD,cAJiBrB,IAAMC,WC1DXqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.634acbf5.chunk.js","sourcesContent":["import React from 'react';\n\n// Styling\nimport './Editor.css';\n\n// React-Redux\nimport { connect } from 'react-redux';\n\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorText: this.props.editorText,\n      textToPreview: \"\"\n    };\n    // Bind functions\n    this.handleTextAreaChange = this.handleTextAreaChange.bind(this);\n  }\n\n  // Function: when textarea is modified, update state to reflect changes\n  handleTextAreaChange = (event) => {\n    this.setState({\n      editorText: event.target.value,\n    });\n  }\n\n  // Render\n  render() {\n    return (\n      <React.Fragment>\n        <textarea id=\"editor\" value={this.state.editorText} \n        onChange={this.handleTextAreaChange}>\n        </textarea>\n      </React.Fragment>    \n    );\n  }\n}\n\n// Puts state data into store\nconst mapStateToProps = (state) => {\n  console.log(state.editorText);\n  return {\n    editorText: state.editorText\n  }\n}\n\n// Dispatch to actually change store\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    editorText: props.editorText\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Editor);","import React from 'react';\n\n// Styling\nimport './Preview.css';\n\n// React-Redux\nimport { connect } from 'react-redux';\n\nclass Preview extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorText: \"\"\n    };\n  }\n\n  // Function: Copy text from Editor and set it as Preview text\n\n  // Function: Apply Markdown to copied text\n\n\n  // Render\n  render() {\n    return (\n      <div id=\"preview\">\n        <div id=\"markdown-text\">\n          \n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = function(state) {\n  console.log(state.editorText);\n  return {\n    previewText: state.editorText\n  }\n}\n\nexport default connect(mapStateToProps)(Preview);","import React from 'react';\n\n// Styling\nimport './App.css';\n\n// React-Redux\nimport { Provider } from 'react-redux';\nimport { createStore} from 'redux';\n\n// Components\nimport Editor from './Editor';\nimport Preview from './Preview';\n\n// ---------------------------- Redux Code ---------------------------------- //\n// Consts for action types\nconst PREVIEW = 'PREVIEW';\n\n// Action creator for 'PREVIEW'\n// const previewText = (text) => {\n//   return {\n//     type: PREVIEW,\n//     text: text\n//   }\n// }\n\n// Reducer\nconst editorReducer = (state = '', action) => {\n  switch (action.type) {\n    case (PREVIEW):\n      return [action.text];\n    default:\n      return state;\n  }\n}\n\n// Create the Redux store\nconst store = createStore(editorReducer);\n\n// ---------------------------- React Code ---------------------------------- //\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorText: \"\",\n      previewText: \"\"\n    };\n  }\n\n  // Subscribe to store\n  // store.subscribe = () => {\n  //   this.setState({\n  //     editorText: store.getState().editorText;\n  //   });\n  // }\n\n  // Render\n  render() {\n    return (\n      <div id=\"app-body\">\n        <Editor />\n        <Preview editorText={this.props.editorText}/>\n      </div>\n    );\n  }\n}\n\n\n\n\n// Wrap App with Provider to provide access to store\nclass AppWrapper extends React.Component {\n  render() {\n    return (\n      <Provider store = {store}>\n        <App />\n      </Provider>\n    );\n  }\n}\n\n\nexport default AppWrapper;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}